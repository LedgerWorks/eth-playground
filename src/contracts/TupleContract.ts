/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace TupleContract {
  export type StoreStruct = {
    name: PromiseOrValue<string>;
    availableCash: PromiseOrValue<BigNumberish>;
  };

  export type StoreStructOutput = [string, BigNumber] & {
    name: string;
    availableCash: BigNumber;
  };

  export type ItemStruct = {
    name: PromiseOrValue<string>;
    quantity: PromiseOrValue<BigNumberish>;
  };

  export type ItemStructOutput = [string, BigNumber] & {
    name: string;
    quantity: BigNumber;
  };
}

export interface TupleContractInterface extends utils.Interface {
  functions: {
    "_availableCash()": FunctionFragment;
    "_itemCount()": FunctionFragment;
    "_items(uint256)": FunctionFragment;
    "_name()": FunctionFragment;
    "_tupleStore()": FunctionFragment;
    "addItem((string,int256))": FunctionFragment;
    "getAllItemsQuantity()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_availableCash"
      | "_itemCount"
      | "_items"
      | "_name"
      | "_tupleStore"
      | "addItem"
      | "getAllItemsQuantity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_availableCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_itemCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "_name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_tupleStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addItem",
    values: [TupleContract.ItemStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllItemsQuantity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_availableCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tupleStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllItemsQuantity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TupleContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TupleContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _availableCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    _itemCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; quantity: BigNumber }>;

    _name(overrides?: CallOverrides): Promise<[string]>;

    _tupleStore(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { name: string; availableCash: BigNumber }
    >;

    addItem(
      item: TupleContract.ItemStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllItemsQuantity(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _availableCash(overrides?: CallOverrides): Promise<BigNumber>;

  _itemCount(overrides?: CallOverrides): Promise<BigNumber>;

  _items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; quantity: BigNumber }>;

  _name(overrides?: CallOverrides): Promise<string>;

  _tupleStore(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; availableCash: BigNumber }>;

  addItem(
    item: TupleContract.ItemStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllItemsQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _availableCash(overrides?: CallOverrides): Promise<BigNumber>;

    _itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    _items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; quantity: BigNumber }>;

    _name(overrides?: CallOverrides): Promise<string>;

    _tupleStore(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { name: string; availableCash: BigNumber }
    >;

    addItem(
      item: TupleContract.ItemStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllItemsQuantity(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _availableCash(overrides?: CallOverrides): Promise<BigNumber>;

    _itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    _items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _name(overrides?: CallOverrides): Promise<BigNumber>;

    _tupleStore(overrides?: CallOverrides): Promise<BigNumber>;

    addItem(
      item: TupleContract.ItemStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllItemsQuantity(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _availableCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _itemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tupleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addItem(
      item: TupleContract.ItemStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllItemsQuantity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
