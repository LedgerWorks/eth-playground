/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace CoinFlip {
  export type FlipStruct = {
    status: PromiseOrValue<BigNumberish>;
    calledSide: PromiseOrValue<BigNumberish>;
    wagerAmount: PromiseOrValue<BigNumberish>;
    flipFee: PromiseOrValue<BigNumberish>;
    flipResult: PromiseOrValue<BigNumberish>;
  };

  export type FlipStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number
  ] & {
    status: number;
    calledSide: number;
    wagerAmount: BigNumber;
    flipFee: BigNumber;
    flipResult: number;
  };
}

export interface CoinFlipInterface extends utils.Interface {
  functions: {
    "banPlayer(address)": FunctionFragment;
    "collect()": FunctionFragment;
    "disable()": FunctionFragment;
    "disabled()": FunctionFragment;
    "enable()": FunctionFragment;
    "flip(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getCurrentFlip(address)": FunctionFragment;
    "getCurrentFlipIndex(address)": FunctionFragment;
    "getFlip(address,uint256)": FunctionFragment;
    "incrementCurrentFlip(address)": FunctionFragment;
    "isBanned(address)": FunctionFragment;
    "isWinner(address)": FunctionFragment;
    "overrideFlipStatus(address,uint8)": FunctionFragment;
    "setFeeBasePoints(uint256)": FunctionFragment;
    "setMaxWager(uint256)": FunctionFragment;
    "setMinWager(uint256)": FunctionFragment;
    "unbanPlayer(address)": FunctionFragment;
    "wager(uint8)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "banPlayer"
      | "collect"
      | "disable"
      | "disabled"
      | "enable"
      | "flip"
      | "getBalance"
      | "getCurrentFlip"
      | "getCurrentFlipIndex"
      | "getFlip"
      | "incrementCurrentFlip"
      | "isBanned"
      | "isWinner"
      | "overrideFlipStatus"
      | "setFeeBasePoints"
      | "setMaxWager"
      | "setMinWager"
      | "unbanPlayer"
      | "wager"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "banPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(functionFragment: "disabled", values?: undefined): string;
  encodeFunctionData(functionFragment: "enable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flip",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFlip",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFlipIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlip",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementCurrentFlip",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBanned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWinner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "overrideFlipStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBasePoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWager",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWager",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbanPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wager",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "banPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFlip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFlipIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementCurrentFlip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBanned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideFlipStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBasePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbanPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CoinFlip extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoinFlipInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    banPlayer(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabled(overrides?: CallOverrides): Promise<[boolean]>;

    enable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flip(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[CoinFlip.FlipStructOutput]>;

    getCurrentFlipIndex(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFlip(
      _player: PromiseOrValue<string>,
      _flipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CoinFlip.FlipStructOutput]>;

    incrementCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBanned(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWinner(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    overrideFlipStatus(
      _player: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeBasePoints(
      _feeBasePoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxWager(
      _maxWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinWager(
      _minWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbanPlayer(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wager(
      _calledSide: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  banPlayer(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collect(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabled(overrides?: CallOverrides): Promise<boolean>;

  enable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flip(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentFlip(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<CoinFlip.FlipStructOutput>;

  getCurrentFlipIndex(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFlip(
    _player: PromiseOrValue<string>,
    _flipIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CoinFlip.FlipStructOutput>;

  incrementCurrentFlip(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBanned(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWinner(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  overrideFlipStatus(
    _player: PromiseOrValue<string>,
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeBasePoints(
    _feeBasePoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxWager(
    _maxWager: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinWager(
    _minWager: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbanPlayer(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wager(
    _calledSide: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    banPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(overrides?: CallOverrides): Promise<void>;

    disable(overrides?: CallOverrides): Promise<void>;

    disabled(overrides?: CallOverrides): Promise<boolean>;

    enable(overrides?: CallOverrides): Promise<void>;

    flip(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<CoinFlip.FlipStructOutput>;

    getCurrentFlipIndex(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlip(
      _player: PromiseOrValue<string>,
      _flipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CoinFlip.FlipStructOutput>;

    incrementCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isBanned(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWinner(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    overrideFlipStatus(
      _player: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBasePoints(
      _feeBasePoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWager(
      _maxWager: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWager(
      _minWager: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbanPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wager(
      _calledSide: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    banPlayer(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabled(overrides?: CallOverrides): Promise<BigNumber>;

    enable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flip(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentFlipIndex(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlip(
      _player: PromiseOrValue<string>,
      _flipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBanned(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWinner(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overrideFlipStatus(
      _player: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeBasePoints(
      _feeBasePoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxWager(
      _maxWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinWager(
      _minWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbanPlayer(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wager(
      _calledSide: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    banPlayer(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flip(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFlipIndex(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlip(
      _player: PromiseOrValue<string>,
      _flipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementCurrentFlip(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBanned(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWinner(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideFlipStatus(
      _player: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBasePoints(
      _feeBasePoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWager(
      _maxWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinWager(
      _minWager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbanPlayer(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wager(
      _calledSide: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
